
<<<<<<< HEAD
Exemplos práticos em Python para estudar Redis:
- Conceitos básicos (SET/GET, HSET/HGET, EXPIRE/TTL).
- Padrão cache-aside (cache + fonte de dados).
- Hashes com expiração e conversão para dicionário Python.

## Estrutura

- Scripts:
  - [run.py](run.py) — Hash + TTL e consumo via `configs.start_form`.
  - [redis_raw.py](redis_raw.py) — Comandos básicos da lib `redis`.
  - [redis_perf.py](redis_perf.py) — Padrão cache-aside com “MySQL” mock.
- Conexão:
  - [models/connection/connect_options.py](models/connection/connect_options.py) — Parâmetros de conexão.
  - [models/connection/redis_connection.py](models/connection/redis_connection.py) — Cria a conexão (`RedisConnectionHandle`).
- Repositórios:
  - [models/redis/redis_repository.py](models/redis/redis_repository.py) — SET/GET, HSET/HGET, TTL.
  - [models/mysql/mysql_repository.py](models/mysql/mysql_repository.py) — Mock de fonte de dados.

## Pré-requisitos

- Python 3.11+
- Dependência:
  ```
  pip install redis
  ```

## Instalação rápida (Windows/PowerShell)

```
py -m venv .venv
.\.venv\Scripts\Activate.ps1
python -m pip install --upgrade pip
pip install redis
```

## Configuração

Recomenda-se usar variáveis de ambiente (não versione segredos):

```
$env:REDIS_HOST="seu-host"
$env:REDIS_PORT="6379"
$env:REDIS_DB="0"
$env:REDIS_PASSWORD="sua-senha"
```

Ajuste [models/connection/connect_options.py](models/connection/connect_options.py) para ler de `os.environ`.

## Como executar

- Comandos básicos:
  ```
  python redis_raw.py
  ```

- Hash com expiração + integração com `start_form`:
  ```
  python run.py
  ```
  Observações:
  - Usa a data atual como nome do hash.
  - Insere campos “banana”, “apple”, “uva”.
  - Define TTL (40s) no hash com `insert_hash_ex`.

- Cache-aside (Redis + “MySQL” mock):
  ```
  python redis_perf.py
  ```
  Fluxo:
  1) Tenta ler do Redis (`RedisRepository.get`).
  2) Se não existir, lê do mock MySQL e grava no Redis com expiração (`insert_ex`).

## Resumo de aplicações com Redis

- Cache de leitura (cache-aside).
- Sessões de usuário.
- Rate limiting (contadores com TTL).
- Filas/streams para processamento assíncrono.
- Leaderboards (Sorted Sets).
- Locks distribuídos (SET NX + TTL).

## Exemplo de uso (código)

```python
from models.connection.redis_connection import RedisConnectionHandle
from models.redis.redis_repository import RedisRepository

redis_conn = RedisConnectionHandle().connect()
repo = RedisRepository(redis_conn)

# String com expiração
repo.insert_ex("foo", "bar", 10)

# Hash com expiração
repo.insert_hash_ex("user:1", "name", "Alice", 30)

print(repo.get("foo"))                  # -> "bar"
print(repo.get_hash("user:1", "name"))  # -> "Alice"
```

## Boas práticas

- Nunca commitar credenciais; use variáveis de ambiente/secret manager.
- Defina TTL para chaves de cache.
- Padronize nomes (ex.: entidade:id:campo).
- Monitore hits/misses e ajuste TTL conforme a necessidade.
=======
>>>>>>> 3328fd017f655fafe426b5022c9cc3ad4899bebf
